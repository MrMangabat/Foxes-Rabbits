import time
import random
import results
import entities
import parameters 
from typing import Tuple
from typing import List
from visualiser import ColourGraphics

def buildWorld(parameters: parameters.Simulation)->dir:
    """[Initialisation of the world in acording to the pdf phase 2. Here the information is saved in af dictionary for quick acces to all the variables]

    Args:
        parameters ([parameters.Simulation]): [The parameters gotten from the user]

    Returns:
        [dir]: [A dictionary with the animals and the world full of patches ]
    """    
    # Build World!
    world_grid = []
    world_1d = []

    # Building grid
    for x in range(parameters.world.west_east_length):
        # Create a row for west to east in grid.
        row: list[entities.Patch] = []
        # add patches to row by height.
        for y in range(parameters.world.north_south_length):
            patch = entities.Patch(x, y)
            # reference variables is used to ensure both lists are updated and in sync with one another.
            world_1d.append(patch)
            row.append(patch)
        world_grid.append(row)

    # Populate World
    # out of total patches in world select samlpe == to total population size
    patchIds = random.sample(
        range(parameters.world.west_east_length * parameters.world.north_south_length),
        parameters.rabbits.initial_size + parameters.foxes.initial_size,
    )

    # contains ref. variable for all animals
    rabbits = []
    foxes = []

    # add animals
    for id in patchIds:
        # Add animal
        if len(rabbits) < parameters.rabbits.initial_size:
            rabbits.append(
                entities.Rabbit(
                    parameters.rabbits,
                    world_1d[id],
                    random.randint(0, parameters.rabbits.max_age-1),
                )
            )
            # skip iteration in loop.
        elif len(foxes) < parameters.foxes.initial_size:
            foxes.append(
                entities.Fox(
                    parameters.foxes,
                    world_1d[id],
                    random.randint(0, parameters.foxes.max_age-1),
                )
            )

    return {
        "world"     : world_grid,
        "world_1d"  : world_1d,
        "animals"   : rabbits + foxes,
    }

def getNextPatch(
    animal      : entities.Animal,
    parameters  : parameters.Simulation
    )->List[List[int]]:
    """[A function for control of the world, it tjeks the patches close to the animal and gives you the valid patces it can move to or breed on in aspect to the borders of the world]

    Args:
        animal (entities.Animal): [The animal in question]
        parameters (parameters.Simulation): [parameters decribing the world]

    Returns:
        List[list[int]]: [A list with the coordinates of the valid patches]
    """    
    # Find legal patches
    [x,y] = animal.patch().coordinates()

    movableCoords = {
        "north" : [x, y + 1],
        "south" : [x, y - 1],
        "west"  : [x - 1, y],
        "east"  : [x + 1, y],
    }

    # movableCoords = [[-1,4],[0,3],[0,5]] # husk alle sider
    # ved len 5: [out of index on x], [ok], [out of index on y]
    validMovement = []

    if parameters.is_toroid:
        # snake world
        # each key in our dictionary do not support going around the grid more than once.
        for key in movableCoords:
            # [x,y] handles the x-axis and y-axis
            [x,y] = movableCoords[key]
            if x == parameters._west_east_length:
                x = 0
            if y == parameters._north_south_length:
                y = 0
            # collect valid patch coord.
            validMovement.append([x,y])
    else:
        # island world
        for key in movableCoords:
            # [x,y]
            [x,y] = movableCoords[key]
            # handles x-axis
            valid = True

            if x < 0 or x == parameters._west_east_length:
                valid = False
            # handles y-axis
            if y < 0 or y == parameters._north_south_length:
                valid = False

            if valid:
                validMovement.append([x,y])

    if len(validMovement) == 0:
        return []
    else:
        return validMovement

def getValidPatches(
    coords: List[List[int]],
    animal: entities.Animal,
    grid: List[List[entities.Patch]],
    breed: bool,
    )->List[List[int]]:
    """[Kontroling  the patchese on the coordinates for either only the same animal or also for its preditor]

    Args:
        coords (List[List[int]]): [The Coordinates op for validation]
        animal (entities.Animal): [The animal in question]
        grid (List[List[entities.Patch]]): [The grid of the world]
        breed (bool): [True if the animale is brreding, False if it is moving]

    Returns:
        List[List[int]]: [A list with the coordinates of the valid patches]
    """    
    validPatches = [] # allocated place for the validated
    for [x,y] in coords:
        
        patch = grid[x][y]

        valid = True
        All_valid = True
       
        if type(animal) is entities.Rabbit and breed:
            if patch._has_alive_fox():
                All_valid = False
            if patch._has_alive_rabbit():
                valid = False
        elif type(animal) is entities.Rabbit:
            if patch._has_alive_rabbit():
                valid = False
        elif type(animal) is entities.Fox:
            if patch._has_alive_fox():
                valid = False

        if not All_valid:
            return []
        if valid:
            validPatches.append([x,y])
        

    return validPatches

def sleep(world_dir: dir,res: results.SimulationStats)-> Tuple[dir,results.SimulationStats]:
    """[summary]

    Args:
        world_dir (dir): [description]
        res (results.SimulationStats): [description]

    Returns:
        Tuple[dir,results.SimulationStats]: [description]
    """    
    world_dir["animals"]    =[]
    for patch in world_dir.get("world_1d"):
        patch.tick()
        for animal in patch.animals():
            # used inheritance to reuse function for both species
            animal.tick()
            # The dead is collected in our woorld dictuanosjfbapuybdsf 
            if not animal.is_alive():
                if type(animal) is entities.Rabbit and animal.energy()==0:
                    res.rabbits.age_at_death.append(animal.age())
                    res.rabbits.dead_by_starvation+= 1
                elif type(animal) is entities.Rabbit:
                    res.rabbits.age_at_death.append(animal.age())
                    res.rabbits.dead_by_old_age += 1
                elif animal.energy()==0:
                    res.foxes.age_at_death.append(animal.age())
                    res.foxes.dead_by_starvation+= 1
                else: 
                    res.foxes.age_at_death.append(animal.age())
                    res.foxes.dead_by_old_age += 1
            else:
                world_dir["animals"].append(animal)
                
    return world_dir,res

def feed(world_dir: dir,res: results.SimulationStats)->Tuple[dir,results.SimulationStats]:
    """[The Feeding step of the update. It gets the animals to feed and count the ones that dies]

    Args:
        world_dir ([dir]): [The dictionary for the world and the animals]
        res ([results.SimulationStats]): [Place were statestik is saved]

    Returns:
        Tuple[dir,results.SimulationStats]: [returns the updated dictionary and statestik ]
    """    
    living_animals=[] # allocating the variable for the still living animal for updating of the dir

    for animal in world_dir["animals"]:
    # Rabbit, automatically eats grass
    # Fox, check for rabbits, if rabbit on same patch it gets eaten and killed.
        if type(animal) is entities.Fox : 
            animal.feed()
        if type(animal) is entities.Fox and animal.is_alive():
            living_animals.append(animal)
        elif type(animal) is entities.Fox:
            res.foxes.age_at_death.append(animal.age())
            res.foxes.dead_by_starvation += 1
            

        
    for animal in world_dir["animals"]:
    # Rabbit, automatically eats grass
    # Fox, check for rabbits, if rabbit on same patch it gets eaten and killed.
        if type(animal) is entities.Rabbit and not animal.is_alive():
            res.rabbits.age_at_death.append(animal.age())
            res.rabbits.dead_by_predation += 1

            # Getting the coordinats where the rabbit was killed
            [x,y]=animal.patch().coordinates()
            res.kills_per_patch[x][y] += 1
        elif type(animal) is entities.Rabbit : 
            animal.feed()
            if not animal.is_alive():
                res.rabbits.age_at_death.append(animal.age())
                res.rabbits.dead_by_starvation += 1
            else:
                living_animals.append(animal)

   
            
    # updating the dictionary
    world_dir["animals"]=living_animals 
    return world_dir,res

def Breeding(world_dir: dir, parameter: parameters.Simulation ,res)->Tuple[list[entities.Animal],results.SimulationStats]:
    """[The breeding step of the update. Were the conditions for breeding is tjekt and if they are optimal a new animal is introduced into the world.]

    Args:
        world_dir (dir): [The dictionary for the world and the animals]
        parameter (parameters.Simulation): [Parameters for the world]
        res ([results.SimulationStats]): [Place were statestik is saved]

    Returns:
        Tuple[list[entities.Animal],results.SimulationStats]: [returns the animal witch can move and the updated statictik]
    """    
    
    animale_to_move=[]
    grid=world_dir.get("world")
    for animal in  world_dir["animals"]:
        if animal.can_reproduce():
            # get available patch
            validMovement = getNextPatch(animal,parameter)
            valid_coord = getValidPatches(validMovement, animal, grid, True)
            
            if(valid_coord):
                [x,y]=random.sample(valid_coord,1)[0]
                newborn = animal.reproduce(grid[x][y])
                if(newborn==None):
                    animale_to_move.append(animal)
                else:
                    if type(animal) is entities.Rabbit:
                        res.rabbits.total +=1
                    else:
                        res.foxes.total +=1

            else:
                animale_to_move.append(animal)
        else: 
            animale_to_move.append(animal)
    return animale_to_move, res

def Move_animals(
    animale_to_move: list[entities.Animal],
    grid: List[List[entities.Patch]],
    parameters: parameters.Simulation
    ):
    """[Last step of the update. Moving the movable animals on the world grid]
    Args:
        animale_to_move (list[entities.Animal]): [The animal that have the chance to mocve]
        grid (List[List[entities.Patch]]): [Grid of the world]
        parameters (parameters.Simulation): [Parameters for the world]
    """    
    for animal in animale_to_move:
        validMovement = getNextPatch(animal,parameters)
        valid_coord = getValidPatches(validMovement, animal, grid, False)

        if valid_coord:
            [x,y]=random.sample(valid_coord,1)[0]
            animal.move_to(grid[x][y])

def rabbitsYouKnow():
    """Solely for entertainment purposes
    """    
    for times in range(7):
        print(
                """
    Reproducing, please wait..
    \\\\
     \\\\_     \\\\
      (')     \\\\_
      / )=.---(')
      o( )o( )_-\_ )"""
        )
        time.sleep(0.1)
        # print(chr(27) + "[2J")

        print(
                """
    Reproducing, please wait...
    \\\\
     \\\\_      \\\\
      (')      \\\\_
      / )=  .---(')
      o( )o  ( )_-\_ )"""
        )

        time.sleep(0.1)
        # print(chr(27) + "[2J")

def list_to_grid(list_1: List[int],colum: int)->List[List[int]]:
    """[Convert a list to a list[list[]] aka grid

    Args:
        list_1 (List[int]): [A list]
        colum (int): [how many collums is needed]

    Returns:
        List[List[int]]: [The resulting Grid]
    """    
    grid_1 = [list_1[x:x+colum] for x in range(0, len(list_1), colum)]
    return grid_1

def alive_animals(world: dir,res: results.SimulationStats)->results.SimulationStats:
    """[A data collection function that input number og different animals and the energy levels for each step]

    Args:
        world (dir): [The dictionary for the world and the animals]
        res (results.SimulationStats): [saved statistisk]

    Returns:
        results.SimulationStats: [Returns the updated statistisk]
    """    
    energy_rab=0
    energy_rab_num=0

    energy_fox=0
    energy_fox_num=0
    for animal in world.get("animals"):
        if type(animal) is entities.Rabbit:
            energy_rab += animal.energy()
            energy_rab_num +=1
        else:
            energy_fox += animal.energy()
            energy_fox_num +=1



    res.rabbits.size_per_step.append(energy_rab_num)
    res.foxes.size_per_step.append(energy_fox_num)    

    if energy_rab_num!=0:
        res.rabbits.avg_energy_per_step.append(round(energy_rab/energy_rab_num,2))
    else:
        res.rabbits.avg_energy_per_step.append(0)
    if energy_fox_num!=0:
        res.foxes.avg_energy_per_step.append(round(energy_fox/energy_fox_num,2))
    else:
        res.foxes.avg_energy_per_step.append(0)

    if res.rabbits.avg_energy_per_step[-1]==0 and res.foxes.avg_energy_per_step[-1]==0:
        res.avg_energy_per_step.append(0)
    elif res.rabbits.avg_energy_per_step[-1]==0:
        res.avg_energy_per_step.append(res.foxes.avg_energy_per_step[-1])
    elif res.foxes.avg_energy_per_step[-1]==0:
        res.avg_energy_per_step.append(res.rabbits.avg_energy_per_step[-1])
    else:
        res.avg_energy_per_step.append(round((res.rabbits.avg_energy_per_step[-1]+res.foxes.avg_energy_per_step[-1])/2,2))

    return res

def print_theshit(res):
    print("A record of the age of death of each individual.")
    print(res.foxes.age_at_death)     #
    print(res.rabbits.age_at_death)
    
          
    print("\n")
    print("A record of the average energy level across the population, in chronological order.")
    print(res.foxes.avg_energy_per_step)       #
    print(res.rabbits.avg_energy_per_step)#
    print(res.avg_energy_per_step)
          
    print("\n")
    print("Number of individuals that died by old age.")
    print(res.foxes.dead_by_old_age)     #
    print(res.rabbits.dead_by_old_age)       #
    
          
    print("\n")
    print("Number of individuals that died by predation.")
    print(res.rabbits.dead_by_predation)#
    
          
    print("\n")
    print(" Number of individuals that died by starvation.")
    print(res.foxes.dead_by_starvation)       #
    print(res.rabbits.dead_by_starvation)       #
    
    print("\n")
    print("A record of the size of the (alive) population, in chronological order.")
    print(res.foxes.size_per_step)
    print(res.rabbits.size_per_step)
    
    print("\n")
    print("Individuals alive and ever lived")
    print(res.foxes.total)       #
    print(res.rabbits.total)       #
    
    
    print("\n")
    print("A grid containing the total of deaths by predation per every patch in the simulation.")
    print(res.kills_per_patch)

    print("\n")
    print("Alle de døde")
    print(res.foxes.dead_by_old_age+res.foxes.dead_by_starvation)
    print(res.rabbits.dead_by_old_age+res.rabbits.dead_by_starvation+res.rabbits.dead_by_predation)
    print("total population alive and dead")
    print(res.foxes.total+res.rabbits.total)       #
 
    print("samlet døde")
    input=res.rabbits.dead_by_old_age+res.rabbits.dead_by_starvation+res.rabbits.dead_by_predation+res.foxes.dead_by_old_age+res.foxes.dead_by_starvation
    print(input)
    print("different")
    print(res.foxes.total+res.rabbits.total-input) 
    print(res.foxes.size_per_step[-1]+res.rabbits.size_per_step[-1])
    print(res.foxes.size_per_step[-1])
    print(res.rabbits.size_per_step[-1])


def run(parameters: parameters.Simulation):
    """[Primary function that combine alle the updates and data collection in one]

    Args:
        parameters (parameters.Simulation): [The parameters of the world]
    """
    # checks that preconditions on parameters are met
    print(" Checking parameters...", end="")
    assert 0 < parameters.world.north_south_length
    assert 0 < parameters.world.west_east_length
    assert 0 <= parameters.rabbits.initial_size <= parameters.world.area()
    assert 0 <= parameters.foxes.initial_size <= parameters.world.area()
    assert 0 <= parameters.rabbits.reproduction_probability <= 1
    assert 0 <= parameters.foxes.reproduction_probability <= 1
    assert 0 <= parameters.rabbits.metabolism
    assert 0 <= parameters.foxes.metabolism
    print("everything is ok.")

    # the rest is for faking some computation using time.sleep while
    # displaying some progress indicator.

    # Build World and Popoulate World
    world = buildWorld(parameters)


    ## rabbits dont stack, foxes dont stack, foxes stacks rabbits

    res = results.SimulationStats()
    alive_animals(world,res)
    res.rabbits.total = parameters.rabbits.initial_size 
    res.foxes.total = parameters.foxes.initial_size 

    kill_list=[0]*parameters.world.west_east_length*parameters.world.north_south_length
    kill_grid=list_to_grid(kill_list,parameters.world.north_south_length)
    res.kills_per_patch=kill_grid

    if parameters.execution.batch:  
        cg = ColourGraphics(
            parameters.execution.max_steps,
            world.get("world_1d"),
            parameters.world.west_east_length,
            parameters.world.north_south_length,
            parameters.execution.step_delay
            )
        cg.start()
        cgu=cg.update
        cgs=cg.stop
    else:
        cgu=int
        cgs=int
   
    # Per tick
    tick=0

    rabbitsYouKnow()
    while len(world.get("animals"))!=0 and tick < parameters.execution.max_steps:
        tick += 1
        

        [world,res]                  = sleep(world,res)
        [world,res]                  = feed(world,res)

        [Moveable_animals,res]  = Breeding(world,parameters.world,res)
        Move_animals(Moveable_animals, world.get("world"), parameters.world)
        res = alive_animals(world,res)

        cgu(tick)

   
    cgs()

    res.steps=tick

    print("simulation Complete")
    a=0
    if a==1:
        print_theshit(res)

sim=parameters.Simulation()
sim.execution.max_steps=100
sim.execution.batch=True
run(sim)
