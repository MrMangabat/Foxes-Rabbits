import base64
eval(compile(base64.b64decode(b'IiIiClRoaXMgbW9kdWxlIHByb3ZpZGVzIGZ1bmN0aW9ucyBmb3IgYW5hbHlzaW5nIGFuZCByZXBvcnRpbmcgcmVzdWx0cyBvZiBhIHNpbXVsYXRpb24uCiIiIgoKaW1wb3J0IG1hdHBsb3RsaWIgYXMgbXBsCmltcG9ydCBtYXRwbG90bGliLnB5cGxvdCBhcyBwbHQKCmZyb20gcmVzdWx0cyBpbXBvcnQgKgoKZGVmIHByaW50X3N1bW1hcnkocmVzdWx0cyA6IFNpbXVsYXRpb25TdGF0cyk6CiAgIiIiCiAgUHJpbnRzIGEgc3VtbWFyeSBvZiB0aGUgc2ltdWxhdGlvbiByZXN1bHRzIGFuZCBiYXNpYyBzdGF0aXN0aWNzLgogICIiIgoKICAjIGxldCdzIG92ZXJjb21wbGljYXRlIHRoaXMuLi4KICAjICAgICAgICAgICAgICAgfCBmb3hlcyB8IHJhYmJpdHMgfCBhZ2dyZWdhdGVkCiAgIyAgLS0tLS0tLS0tLS0tLSstLS0tLS0tKy0tLS0tLS0tLSstLS0tLS0tLS0tLQogICMgIGluZGl2aWR1YWxzICB8ICAgICAgIHwgICAgICAgICB8ICAgICAgICAgICAKICAjICAgIG1pbiAgICAgICAgfCAgICAgICB8ICAgICAgICAgfCAgICAgICAgICAgCiAgIyAgICBtYXggICAgICAgIHwgICAgICAgfCAgICAgICAgIHwgICAgICAgICAgIAogICMgICAgYXZnICAgICAgICB8ICAgICAgIHwgICAgICAgICB8ICAgICAgICAgICAKICAjICAtLS0tLS0tLS0tLS0tKy0tLS0tLS0rLS0tLS0tLS0tKy0tLS0tLS0tLS0tCiAgIyAgZGVhdGhzICAgICAgIHwgICAgICAgfCAgICAgICAgIHwgICAgICAgICAgIAogICMgICAgb2xkIGFnZSAgICB8ICAgICAgIHwgICAgICAgICB8ICAgICAgICAgICAKICAjICAgIHN0YXJ2YXRpb24gfCAgICAgICB8ICAgICAgICAgfCAgICAgICAgICAgCiAgIyAgICBwcmVkYXRpb24gIHwgICAgICAgfCAgICAgICAgIHwgICAgICAgICAgIAogICMgIC0tLS0tLS0tLS0tLS0rLS0tLS0tLSstLS0tLS0tLS0rLS0tLS0tLS0tLS0KICAjICAgICAgICAgICAgICAgfCBmb3hlcyB8IHJhYmJpdHMgfCBhZ2dyZWdhdGVkCiAgCiAgZGVmIHBvcF9zaXplX3N0YXRzKHRvdCxzaXplX3Blcl9zdGVwKToKICAgIGlmIHNpemVfcGVyX3N0ZXA6CiAgICAgIHNtaW4gPSBtaW4oc2l6ZV9wZXJfc3RlcCkKICAgICAgc21heCA9IG1heChzaXplX3Blcl9zdGVwKQogICAgICBzYXZnID0gcm91bmQoc3VtKHNpemVfcGVyX3N0ZXApIC8gbGVuKHNpemVfcGVyX3N0ZXApLDIpCiAgICBlbHNlOgogICAgICBzbWluID0gc21heCA9IHNhdmcgPSAwCiAgICByZXR1cm4gW3RvdCxzbWluLHNtYXgsc2F2Z10KICAKICBkZWYgcG9wX2RlYXRoc19zdGF0cyhwb3ApOgogICAgcmV0dXJuIFsgcG9wLmRlYWRfYnlfb2xkX2FnZSArIHBvcC5kZWFkX2J5X3N0YXJ2YXRpb24gKyBwb3AuZGVhZF9ieV9wcmVkYXRpb24sIHBvcC5kZWFkX2J5X29sZF9hZ2UsIHBvcC5kZWFkX2J5X3N0YXJ2YXRpb24sIHBvcC5kZWFkX2J5X3ByZWRhdGlvbl0KICAKICBwX2ZveGVzID0gcG9wX3NpemVfc3RhdHMocmVzdWx0cy5mb3hlcy50b3RhbCxyZXN1bHRzLmZveGVzLnNpemVfcGVyX3N0ZXApCiAgcF9yYWJiaXRzID0gcG9wX3NpemVfc3RhdHMocmVzdWx0cy5yYWJiaXRzLnRvdGFsLHJlc3VsdHMucmFiYml0cy5zaXplX3Blcl9zdGVwKQogIHBfY29tYmluZWQgPSBwb3Bfc2l6ZV9zdGF0cyhyZXN1bHRzLmZveGVzLnRvdGFsK3Jlc3VsdHMucmFiYml0cy50b3RhbCwKICAgIFtyZXN1bHRzLmZveGVzLnNpemVfcGVyX3N0ZXBbaV0gKyByZXN1bHRzLnJhYmJpdHMuc2l6ZV9wZXJfc3RlcFtpXSAKICAgIGZvciBpIGluIHJhbmdlKGxlbihyZXN1bHRzLmZveGVzLnNpemVfcGVyX3N0ZXApKSBdICkKICBkX2ZveGVzID0gcG9wX2RlYXRoc19zdGF0cyhyZXN1bHRzLmZveGVzKQogIGRfcmFiYml0cyA9IHBvcF9kZWF0aHNfc3RhdHMocmVzdWx0cy5yYWJiaXRzKQogIGRfY29tYmluZWQgPSBbIGRfZm94ZXNbaV0gKyBkX3JhYmJpdHNbaV0gZm9yIGkgaW4gcmFuZ2UobGVuKGRfZm94ZXMpKSBdCgogIGNvbHMgPSBbCiAgICBbIiAgICAgICAgICAgICIsCiAgICAgImluZGl2aWR1YWxzICIsCiAgICAgIiAgbWluICAgICAgICIsCiAgICAgIiAgbWF4ICAgICAgICIsCiAgICAgIiAgYXZnICAgICAgICIsIAogICAgICJkZWF0aHMgICAgICAiLCAKICAgICAiICBvbGQgYWdlICAgIiwgCiAgICAgIiAgc3RhcnZhdGlvbiIsIAogICAgICIgIHByZWRhdGlvbiAiXSwKICAgIFsiZm94ZXMiXSArIHBfZm94ZXMgKyBkX2ZveGVzLAogICAgWyJyYWJiaXRzIl0gKyBwX3JhYmJpdHMgKyBkX3JhYmJpdHMsCiAgICBbImFnZ3JlZ2F0ZWQiXSArIHBfY29tYmluZWQgKyBkX2NvbWJpbmVkCiAgXQogIGNvbHMgPSBbIFsgc3RyKHYpIGZvciB2IGluIGNvbCBdIGZvciBjb2wgaW4gY29scyBdCiAgd19jb2xzID0gWyBtYXgoIGxlbihzKSBmb3IgcyBpbiBjb2wpIGZvciBjb2wgaW4gY29scyBdCiAgCiAgaGwgPSAnICAnICsgJy0rLScuam9pbignLScgKiBsIGZvciBsIGluICB3X2NvbHMpCiAgaGQgPSAnICAnICsgJyB8ICcuam9pbiggY29sc1tjXVswXS5jZW50ZXIod19jb2xzW2NdKSBmb3IgYyBpbiByYW5nZShsZW4oY29scykpICkKICBwcmludCgpCiAgcHJpbnQoaGQpCiAgcHJpbnQoaGwpCiAgZm9yIHIgaW4gWzEsMiwzLDRdOgogICAgcHJpbnQoJyAnLCcgfCAnLmpvaW4oIGNvbHNbY11bcl0ucmp1c3Qod19jb2xzW2NdKSBmb3IgYyBpbiByYW5nZShsZW4oY29scykpICkpCiAgcHJpbnQoaGwpCiAgZm9yIHIgaW4gWzUsNiw3LDhdOgogICAgcHJpbnQoJyAnLCcgfCAnLmpvaW4oIGNvbHNbY11bcl0ucmp1c3Qod19jb2xzW2NdKSBmb3IgYyBpbiByYW5nZShsZW4oY29scykpICkpCiAgcHJpbnQoaGwpCiAgcHJpbnQoaGQpCiAgcHJpbnQoKQoKIyBjb2xvdXItYmxpbmQgZnJpZW5kbHkgcGFsZXR0ZQpwYWxldHRlID0gWycjMzc3ZWI4JywgJyNmZjdmMDAnLCAnIzk5OTk5OScsICcjNGRhZjRhJywKICAgICAgICAgICAgICAgICcjZjc4MWJmJywgJyNhNjU2MjgnLCAnIzk4NGVhMycsCiAgICAgICAgICAgICAgICAnIzk5OTk5OScsICcjZTQxYTFjJywgJyNkZWRlMDAnXQptYXJrZXJzID0gWydvJywndicsJ14nLCdzJywnPCcsJz4nXQpsaW5lc3R5bGVzID0gWydzb2xpZCcsJ2Rhc2hlZCcsJ2Rhc2hkb3QnLCdkb3R0ZWQnXQoKZGVmIHBsb3RfcG9wX3NpemUocmVzdWx0cyA6IFNpbXVsYXRpb25TdGF0cyk6CiAgIiIiCiAgUGxvdHMgcG9wdWxhdGlvbiBzaXplcyBhZ2FpbnN0IHRpbWUuIAogICIiIgogIHBsdC50aXRsZSgnUG9wdWxhdGlvbnMgb3ZlciB0aW1lJykKICBwbHQueGxhYmVsKCdTaW11bGF0aW9uIHN0ZXBzJykKICBwbHQueHRpY2tzKHJvdGF0aW9uID0gJzkwJykKICBwbHQueWxhYmVsKCdBbGl2ZSBpbmRpdmlkdWFscycpCiAgZGF0YSA9IFtbIHJlc3VsdHMuZm94ZXMuc2l6ZV9wZXJfc3RlcFtpXSArIHJlc3VsdHMucmFiYml0cy5zaXplX3Blcl9zdGVwW2ldCiAgICAgICAgICAgICAgZm9yIGkgaW4gcmFuZ2UobGVuKHJlc3VsdHMuZm94ZXMuc2l6ZV9wZXJfc3RlcCkpIF0sCiAgICAgICAgICByZXN1bHRzLmZveGVzLnNpemVfcGVyX3N0ZXAsCiAgICAgICAgICByZXN1bHRzLnJhYmJpdHMuc2l6ZV9wZXJfc3RlcCBdCiAgZm9yIGkgaW4gcmFuZ2UobGVuKGRhdGEpKToKICAgIHBsdC5wbG90KGRhdGFbaV0sCiAgICAgICAgICAgICAgbGluZXdpZHRoPTEsCiAgICAgICAgICAgICAgbGluZXN0eWxlPWxpbmVzdHlsZXNbaV0sCiAgICAgICAgICAgICAgY29sb3I9cGFsZXR0ZVtpXSkKICBwbHQubGVnZW5kKFsnQWdncmVnYXRlZCcsJ0ZveGVzJywnUmFiYml0cyddKQogIHBsdC5nY2YoKS5jYW52YXMubWFuYWdlci5zZXRfd2luZG93X3RpdGxlKCdGb3hlcyBhbmQgcmFiYml0cycpCiAgcGx0LnNob3coKQoKZGVmIHBsb3RfbGlmZXNwYW4ocmVzdWx0cyA6IFNpbXVsYXRpb25TdGF0cyk6CiAgIiIiCiAgUGxvdHMgbGlmZXNwYW5zIGFjcm9zcyBwb3B1bGF0aW9uIGluZGl2aWR1YWxzLiAKICAiIiIKICBmaWcsIGF4cyA9IHBsdC5zdWJwbG90cygyKQogIGRhdGEgPSBbcmVzdWx0cy5mb3hlcy5hZ2VfYXRfZGVhdGgsIAogICAgICAgICAgcmVzdWx0cy5yYWJiaXRzLmFnZV9hdF9kZWF0aF0KICBmb3IgaSBpbiBbMCwxXToKICAgIGRhdGFbaV0uc29ydChyZXZlcnNlPVRydWUpCiAgICBheHNbaV0ucGxvdChkYXRhW2ldLAogICAgICAgICAgICAgICAgbGluZXdpZHRoPTEsCiAgICAgICAgICAgICAgICBsaW5lc3R5bGU9bGluZXN0eWxlc1swXSwKICAgICAgICAgICAgICAgIGNvbG9yPXBhbGV0dGVbaSsxXSkKICAgICMgYXhzW2ldLmF4ZXMueGF4aXMuc2V0X3RpY2tsYWJlbHMoW10pCiAgYXhzWzBdLnNldF90aXRsZSgnRm94ZXMnKQogIGF4c1sxXS5zZXRfdGl0bGUoJ1JhYmJpdHMnKQogIGZpZy5zdXB0aXRsZSgnTGlmZXNwYW5zJykKICBmaWcuY2FudmFzLm1hbmFnZXIuc2V0X3dpbmRvd190aXRsZSgnRm94ZXMgYW5kIHJhYmJpdHMnKQogIHBsdC5zaG93KCkKICAKCmRlZiBwbG90X2VuZXJneShyZXN1bHRzIDogU2ltdWxhdGlvblN0YXRzKToKICAiIiIKICBQbG90cyB0aGUgYXZlcmFnZSBlbmVyZ3kgYWNyb3NzIHBvcHVsYXRpb24gYWdhaW5zdCB0aW1lLiAKICAiIiIKICBwbHQudGl0bGUoJ0F2ZXJhZ2UgZW5lcmd5IG92ZXIgdGltZScpCiAgcGx0LnhsYWJlbCgnU2ltdWxhdGlvbiBzdGVwcycpCiAgcGx0Lnh0aWNrcyhyb3RhdGlvbiA9ICc5MCcpCiAgcGx0LnlsYWJlbCgnRW5lcmd5IGxldmVsJykKICBwbHQuZ2NhKCkueWF4aXMuc2V0X21ham9yX2Zvcm1hdHRlcihtcGwudGlja2VyLlBlcmNlbnRGb3JtYXR0ZXIoeG1heD0xLCBkZWNpbWFscz1Ob25lLCBzeW1ib2w9JyUnLCBpc19sYXRleD1GYWxzZSkpCiAgZGF0YSA9IFtyZXN1bHRzLmF2Z19lbmVyZ3lfcGVyX3N0ZXAsCiAgICAgICAgICByZXN1bHRzLmZveGVzLmF2Z19lbmVyZ3lfcGVyX3N0ZXAsCiAgICAgICAgICByZXN1bHRzLnJhYmJpdHMuYXZnX2VuZXJneV9wZXJfc3RlcCBdCiAgZm9yIGkgaW4gcmFuZ2UobGVuKGRhdGEpKToKICAgIHBsdC5wbG90KGRhdGFbaV0sCiAgICAgICAgICAgICAgbGluZXdpZHRoPTEsCiAgICAgICAgICAgICAgbGluZXN0eWxlPWxpbmVzdHlsZXNbaV0sCiAgICAgICAgICAgICAgY29sb3I9cGFsZXR0ZVtpXSkKICBwbHQubGVnZW5kKFsnQWdncmVnYXRlZCcsJ0ZveGVzJywnUmFiYml0cyddKQogIHBsdC5nY2YoKS5jYW52YXMubWFuYWdlci5zZXRfd2luZG93X3RpdGxlKCdGb3hlcyBhbmQgcmFiYml0cycpCiAgcGx0LnNob3coKQoKZGVmIHBsb3Rfa2lsbHMocmVzdWx0cyA6IFNpbXVsYXRpb25TdGF0cyk6CiAgIiIiCiAgRGlzcGxheXMgdGhlIGRpc3RyaWJ1dGlvbiBvZiBraWxscy4KICAiIiIKICBwbHQudGl0bGUoJ1NwYXRpYWwgZGlzdHJpYnV0aW9uIG9mIGRlYXRocyBieSBwcmVkYXRpb24nKQogIHBsdC54dGlja3Mocm90YXRpb24gPSAnOTAnKQogIGhlaWdodCA9IGxlbihyZXN1bHRzLmtpbGxzX3Blcl9wYXRjaCkKICB3aWR0aCA9IGxlbihyZXN1bHRzLmtpbGxzX3Blcl9wYXRjaFsxXSkKICBwbHQuaW1zaG93KHJlc3VsdHMua2lsbHNfcGVyX3BhdGNoLCAKICAgICAgICAgICAgIGNtYXA9J2dyYXlfcicpIAogICAgICAgICAgICAgI2V4dGVudD1bMCx3aWR0aCsxLDAsaGVpZ2h0KzFdKQogICNheCA9IHBsdC5nY2EoKSAgICAgICAgICAgCiAgI2F4LmF4ZXMueGF4aXMuc2V0X3RpY2tzKHJhbmdlKHdpZHRoKzEpKQogICNheC5heGVzLnlheGlzLnNldF90aWNrcyhyYW5nZShoZWlnaHQrMSkpCiAgcGx0LmNvbG9yYmFyKCkKICAjcGx0LmdyaWQoVHJ1ZSkKICBwbHQuZ2NmKCkuY2FudmFzLm1hbmFnZXIuc2V0X3dpbmRvd190aXRsZSgnRm94ZXMgYW5kIHJhYmJpdHMnKQogIHBsdC5zaG93KCkK'),'<string>','exec'))