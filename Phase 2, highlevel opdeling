
Greate an empty grid : SIMON
- print/visualize empty grid
- modify the grid (placing rabbits, foxes and grass on patches(græspletter
- check if a patch is occupied
- check if a position is empty
- input a posi

Animals: ANIMALS
- track each fox and rabbit for their coordinate
- track enerygy consumption pr. turn
- track age pr. turn
- track population in increase and decrease for size rabbits
- track population in increase and decrease for size rabbits
- track fox kills
- track age
  - kill foxes from age
  - kill rabbits from age
- energy consumption
  - kill rabbit from starvation
  - kill foxes from starvation
 
 - track and save all data from foxes and rabbits
 
 Grid:
- how to use north/south and west/east
- initialize parameters randomly for simulation start
- a list to keep track on coordinates for random deployment of species

Update:
-
- 
-
-

Entities:
-
-
-
-


Reporting:
-
-
-
-


Results:
-
-
-
-
-
-

Simulation:
-
-
-
-

Visualiser:
-
-
-
-


# -*- coding: utf-8 -*-
"""
Created on Mon Nov 22 16:57:25 2021

@author: Bruger
"""


# import os 
# Path_to_files=os.path.realpath(__file__)

# Path_to_files=Path_to_files.replace("\\"+os.path.basename(__file__),"")

# os.setchdir=Path_to_files

import simulation
# import reporting
import parameters 
import sys
import math
import entities 
import random

sim = parameters.Simulation()

world_grid      = []


prop_list = list(range(sim.world.west_east_length*sim.world.north_south_length))


udvalg_rab = random.sample(prop_list,sim.rabbits.initial_size)

udvalg_rab.sort()

udvalg_fox = random.sample(prop_list,sim.foxes.initial_size)
udvalg_fox.sort()



index_num = -1
udvalg_rab_index = 0
udvalg_fox_index = 0

# we start our world as a list to easyer start the whole world.
world_list = []

for x in range(sim.world.west_east_length):
    # world_grid.append([])
    for y in range(sim.world.north_south_length):
        # the index used to figure out if there has to be a fox or rabbit
        index_num += 1
        
        # the patch is made
        world_list.append(entities.Patch(x, y))
        
        # tjek if a rabbbit has to be placed at the patch
        if len(udvalg_rab)>udvalg_rab_index and udvalg_rab[udvalg_rab_index]==index_num:
            
            # making the random value. done thos way for readability
            random_age_rab = random.randrange(0, stop=sim.rabbits.max_age, step=1)
            random_energy_rab = random.randrange(0, stop=sim.rabbits.max_energy, step=1)

            # the Animale calss is made
            entities.Animal(sim.rabbits,world_list[index_num] , random_energy_rab ,random_age_rab)
            udvalg_rab_index += 1 
            
        # tjek if a fox has to be placed at the patch
        if len(udvalg_fox)>udvalg_fox_index and udvalg_fox[udvalg_fox_index]==index_num:
            
            # making the random value. done thos way for readability
            random_age_fox = random.randrange(0, stop=sim.foxes.max_age, step=1)
            random_energy_fox = random.randrange(0, stop=sim.foxes.max_energy, step=1)

            # the Animale calss is made
            entities.Animal(sim.foxes,world_list[index_num] , random_energy_fox ,random_age_fox)
            udvalg_fox_index += 1



world_grid = [world_list[x:x+sim.world.west_east_length] for x in range(0, len(world_list), sim.world.west_east_length)]


# Det lige gyldigt om vi bruger listen eller grid da det bare pejer på en placering og ikke den realle værdi

# entities.Animal(sim.foxes,world_grid[1][1] , 2)

# hej.patch().coordinates()

# world_grid[x][y].animals()[0]  får vores dyr i den position

# rabit_patch = entities.Patch(1, 1)
# fox_patch = entities.Patch(1, 1)
# entities.Animal(sim.rabbits,rabit_patch , 2, 1)
# entities.Animal(sim.foxes,fox_patch , 2, 1)


# a=world_grid[1][1].animals()[0].same_species_in(rabit_patch)

# rabbits
# for i in range(sim.execution.max_steps):
    
    
#     # går en tur
#     for i in range(len(rabbits)):
#         if len(world_grid[rabitst[i][0]][rabitst[i][1]].animals()[0])==2:
            
#             world_grid[rabitst[i][0]][rabitst[i][1]].animals()[0]
        
