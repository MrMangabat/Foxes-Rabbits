import time
import random
import results
import entities
import parameters 
from typing import Tuple , List
from visualiser import ColourGraphics

def buildWorld(parameters: parameters.Simulation)->dir: # UC 1
    """[Initialisation of the world in acording to the pdf phase 2. Here the information is saved in af dictionary for quick acces to all the variables]

    Args:
        parameters ([parameters.Simulation]): [The parameters gotten from the user]

    Returns:
        [dir]: [A dictionary with the animals and the world full of patches ]
    """    
    # Build World!
    world_grid = []
    world_1d = []

    # Building grid
    for x in range(parameters.world.west_east_length):
        # Create a row for west to east in grid.
        row = []
        # add patches to row by height.
        for y in range(parameters.world.north_south_length):
            patch = entities.Patch(x, y)
            # reference variables is used to ensure both lists are updated and in sync with one another.
            world_1d.append(patch)
            row.append(patch)
        world_grid.append(row)

    # Populate World
    # out of total patches in world select samlpe == to total population size
    patchIds = random.sample(
        range(parameters.world.west_east_length * parameters.world.north_south_length),
        parameters.rabbits.initial_size + parameters.foxes.initial_size,
    )

    # contains ref. variable for all animals
    rabbits = []
    foxes = []

    # add animals
    for id in patchIds:
        # Add animal
        if len(rabbits) < parameters.rabbits.initial_size:
            rabbits.append(
                entities.Rabbit(
                    parameters.rabbits,
                    world_1d[id],
                    random.randint(0, parameters.rabbits.max_age-1),
                )
            )
            # skip iteration in loop.
        elif len(foxes) < parameters.foxes.initial_size:
            foxes.append(
                entities.Fox(
                    parameters.foxes,
                    world_1d[id],
                    random.randint(0, parameters.foxes.max_age-1),
                )
            )

    return {
        "world"     : world_grid,
        "world_1d"  : world_1d,
        "animals"   : rabbits + foxes,
    }

def list_to_grid(list_1: List[int],colum: int)->List[List[int]]: #  UC 2
    """[Convert a list to a list[list[]] This is a grid

    Args:
        list_1 (List[int]): [A list]
        colum (int): [how many collums is needed]

    Returns:
        List[List[int]]: [The resulting grid]
    """    
    grid_1 = [list_1[x:x+colum] for x in range(0, len(list_1), colum)]
    return grid_1

def getNextPatch(
    animal      : entities.Animal,
    parameters  : parameters.Simulation
    )->List[List[int]]: ## UC 3
    """[A function for control of the world, it checks nearby patches to the animal and provides valid
    pathces for movevement or breeding in aspect to the borders of the world]

    Args:
        animal (entities.Animal): [The animal in question]
        parameters (parameters.Simulation): [parameters decribing the world]

    Returns:
        List[list[int]]: [A list with the coordinates of valid patches]
    """    
    # Find legal patches
    [x,y] = animal.patch().coordinates()

    movableCoords = {
        "north" : [x, y + 1],
        "south" : [x, y - 1],
        "west"  : [x - 1, y],
        "east"  : [x + 1, y],
    }

    # Making the return varaible 
    validMovement = []

    if parameters.is_toroid:
        # snake world
        # each key in our dictionary do not support going around the grid more than once.
        for key in movableCoords:
            # [x,y] handles the x-axis and y-axis
            [x,y] = movableCoords[key]
            if x == parameters._west_east_length:
                x = 0
            if y == parameters._north_south_length:
                y = 0
            # collect valid patch coord.
            validMovement.append([x,y])
    else:
        # island world
        for key in movableCoords:
            # [x,y] handles the x-axis and y-axis
            [x,y] = movableCoords[key]
            
            # Handels if the coordinates is valid.
            valid = True
            
            # handles x-axis
            if x < 0 or x == parameters._west_east_length:
                valid = False
            # handles y-axis
            if y < 0 or y == parameters._north_south_length:
                valid = False

            if valid:
                validMovement.append([x,y])

    return validMovement

def getValidPatches(
    coords: List[List[int]],
    animal: entities.Animal,
    grid: List[List[entities.Patch]],
    breed: bool,
    )->List[List[int]]: ## UC 4
    """[Checks patches through coordinates for the same animal and for a rabbits preditor]

    Args:
        coords (List[List[int]]): [The coordinates pp for validation]
        animal (entities.Animal): [The animal in question]
        grid (List[List[entities.Patch]]): [The grid of the world]
        breed (bool): [True if the animale is breeding, False if it is moving]

    Returns:
        List[List[int]]: [A list with the coordinates of valid patches]
    """   
    validPatches = [] # List contains validated patches to be used for movement of animals
    for [x,y] in coords:
        
        patch = grid[x][y]

        valid = True
        All_valid = True
       
        if type(animal) is entities.Rabbit and breed:
            if patch._has_alive_fox():
                All_valid = False
            if patch._has_alive_rabbit():
                valid = False
        elif type(animal) is entities.Rabbit:
            if patch._has_alive_rabbit():
                valid = False
        elif type(animal) is entities.Fox:
            if patch._has_alive_fox():
                valid = False

        if not All_valid:
            return []
        if valid:
            validPatches.append([x,y])
        

    return validPatches

def sleep(world_dir: dir,res: results.SimulationStats)-> Tuple[dir,results.SimulationStats]: # UC 5
    """[This function ensures that the simulation module will handle each step.
    Each step(tick) is done through yhe dictionary world_dir, this is done by accessing
    animals and the one-dimensional world.
    The function will also collect causes of death for each animal.]

    Args:
        world_dir (dir): [Dictionary which maintains all animals and the world, created in the function, build world.]
        res (results.SimulationStats): [Collects statistics for each animal to the results module]

    Returns:
        Tuple[dir,results.SimulationStats]: [Returns an updated world dictionary and an updated simulation statistics.]
    """      
    world_dir["animals"]    =[]
    for patch in world_dir.get("world_1d"):
        patch.tick()
        for animal in patch.animals():
            # used inheritance to reuse function for both species
            animal.tick()
            # The dead is collected in our woorld dictuanosjfbapuybdsf 
            if not animal.is_alive():
                if type(animal) is entities.Rabbit and animal.energy()==0:
                    res.rabbits.age_at_death.append(animal.age())
                    res.rabbits.dead_by_starvation+= 1
                elif type(animal) is entities.Rabbit:
                    res.rabbits.age_at_death.append(animal.age())
                    res.rabbits.dead_by_old_age += 1
                elif animal.energy()==0:
                    res.foxes.age_at_death.append(animal.age())
                    res.foxes.dead_by_starvation+= 1
                else: 
                    res.foxes.age_at_death.append(animal.age())
                    res.foxes.dead_by_old_age += 1
            else:
                world_dir["animals"].append(animal)
                
    return world_dir,res

def feed(world_dir: dir,res: results.SimulationStats)->Tuple[dir,results.SimulationStats]: # UC 6 
    """[The Feeding step for updating during simulation execution. It get the animals to feed and count the ones that dies]

    Args:
        world_dir ([dir]): [The dictionary for the world and animals contained.]
        res ([results.SimulationStats]): [Place were statestics are stored.]

    Returns:
        Tuple[dir,results.SimulationStats]: [Returns the updated dictionary and statestics.]
    """ 
    living_animals=[] # A list of living animals is used to update world dictionary.

    for animal in world_dir["animals"]:
    # Rabbit, automatically eats grass
        if type(animal) is entities.Fox : 
            animal.feed()
        if type(animal) is entities.Fox and animal.is_alive():
            living_animals.append(animal)
        elif type(animal) is entities.Fox:
            res.foxes.age_at_death.append(animal.age())
            res.foxes.dead_by_starvation += 1
            

        
    for animal in world_dir["animals"]:
    # Fox, check for rabbits, if rabbit on same patch it gets eaten and killed.
        if type(animal) is entities.Rabbit and not animal.is_alive():
            res.rabbits.age_at_death.append(animal.age())
            res.rabbits.dead_by_predation += 1

            # Getting the coordinats where the rabbit was killed
            [x,y]=animal.patch().coordinates()
            res.kills_per_patch[x][y] += 1
        elif type(animal) is entities.Rabbit : 
            animal.feed()
            if not animal.is_alive():
                res.rabbits.age_at_death.append(animal.age())
                res.rabbits.dead_by_starvation += 1
            else:
                living_animals.append(animal)

   
            
    # updating the dictionary
    world_dir["animals"]=living_animals 
    return world_dir,res

def Breeding(world_dir: dir, parameter: parameters.Simulation ,res)->Tuple[list[entities.Animal],results.SimulationStats]: # UC 7
    """[The breeding step of the update. If the conditions for breeding are met for each animal a new animal is applied into the world.]

    Args:
        world_dir (dir): [The dictionary for the world and the animals]
        parameter (parameters.Simulation): [Parameters for the world]
        res ([results.SimulationStats]): [Place were statestik is saved]

    Returns:
        Tuple[list[entities.Animal],results.SimulationStats,dir]: [Returns the animal witch can move, the updated statictik, and updated the dictionary]
    """    
    # a list with the animals that is allowd to move. 
    animale_to_move=[]

    # new animal to add
    New_animal=[]

    # The world in 2D to so we can use the x and y coordinats to get the right patch
    grid=world_dir.get("world")

    for animal in  world_dir["animals"]:
        if animal.can_reproduce():
            # get available patch
            validMovement = getNextPatch(animal,parameter)
            valid_coord = getValidPatches(validMovement, animal, grid, True)
            
            # if valid_coord is not empty 
            if(valid_coord):
                [x,y]=random.sample(valid_coord,1)[0]
                newborn = animal.reproduce(grid[x][y])

                # If the reproduce fails the animal has to move.
                if(newborn==None):
                    animale_to_move.append(animal)
                else:
                    # the newborn is registered in the total population and in living animals
                    New_animal.append(newborn)
                    if type(newborn) is entities.Rabbit:
                        res.rabbits.total +=1
                    else:
                        res.foxes.total +=1

            else:
                animale_to_move.append(animal)
        else: 
            animale_to_move.append(animal)

    world_dir["animals"]=world_dir["animals"]+(New_animal)

    return animale_to_move, res, world_dir

def Move_animals(
    animale_to_move: list[entities.Animal],
    grid: List[List[entities.Patch]],
    parameters: parameters.Simulation
    ): # UC 8
    """[Last step of the update. Moving the movable animals on the world grid]
    Args:
        animale_to_move (list[entities.Animal]): [The animals that is allowed to move]
        grid (List[List[entities.Patch]]): [Grid of the world]
        parameters (parameters.Simulation): [Simulation parameters for the current simulation]
    """
    # the animal that has to move is looped over
    for animal in animale_to_move:
        validMovement = getNextPatch(animal,parameters)
        valid_coord = getValidPatches(validMovement, animal, grid, False)

        # if a valid coordinat is found the animal moves
        if valid_coord:
            [x,y]=random.sample(valid_coord,1)[0]
            animal.move_to(grid[x][y])

def rabbitsYouKnow():
    """Solely for entertainment purposes
    """    
    for times in range(7):
        print(
                """
    Reproducing, please wait..
    \\\\
     \\\\_     \\\\
      (')     \\\\_
      / )=.---(')
      o( )o( )_-\_ )"""
        )
        time.sleep(0.1)
        # print(chr(27) + "[2J")

        print(
                """
    Reproducing, please wait...
    \\\\
     \\\\_      \\\\
      (')      \\\\_
      / )=  .---(')
      o( )o  ( )_-\_ )"""
        )

        time.sleep(0.1)
        # print(chr(27) + "[2J")

def alive_animals(world: dir,res: results.SimulationStats)->results.SimulationStats: ## UC 9
    """[A function for data collection, that asserts the input number of different animals and their energy levels for each step in the simulation]

    Args:
        world (dir): [The world dictionary which also contains animals]
        res (results.SimulationStats): [Saved statistics]

    Returns:
        results.SimulationStats: [Returns the updated statistics]
    """ 
    # Counts the total energy across current living rabbits
    energy_rab = 0

    # Counts the total number of rabbits in current living population 
    energy_rab_num = 0

    # Counts the total energy across current living foxes
    energy_fox = 0

    # Counts the total number of foxes in current living population
    energy_fox_num = 0

    for animal in world.get("animals"):
        if type(animal) is entities.Rabbit:
            energy_rab += animal.energy()
            energy_rab_num +=1
        else:
            energy_fox += animal.energy()
            energy_fox_num +=1


    # Collects data for animals dependent on type and their size per simulation step.
    res.rabbits.size_per_step.append(energy_rab_num)
    res.foxes.size_per_step.append(energy_fox_num)    

    # Calculates the average for energy for rabbit population
    if energy_rab_num != 0:
        res.rabbits.avg_energy_per_step.append(round(energy_rab/energy_rab_num,2))
    else:
        res.rabbits.avg_energy_per_step.append(0)

    # Calculates the average for energy for fox population
    if energy_fox_num != 0:
        res.foxes.avg_energy_per_step.append(round(energy_fox/energy_fox_num,2))
    else:
        res.foxes.avg_energy_per_step.append(0)

    # Calculates the total average across both types of animals and the total population
    if res.rabbits.avg_energy_per_step[-1] == 0 and res.foxes.avg_energy_per_step[-1] == 0:
        res.avg_energy_per_step.append(0)
    elif res.rabbits.avg_energy_per_step[-1] == 0:
        res.avg_energy_per_step.append(res.foxes.avg_energy_per_step[-1])
    elif res.foxes.avg_energy_per_step[-1] == 0:
        res.avg_energy_per_step.append(res.rabbits.avg_energy_per_step[-1])
    else:
        res.avg_energy_per_step.append(round((res.rabbits.avg_energy_per_step[-1] + res.foxes.avg_energy_per_step[-1]) / 2,2))

    return res

def run(parameters: parameters.Simulation)->results.SimulationStats:
    """[Primary function that combine all the updates and data collection in one.]

    Args:
        parameters (parameters.Simulation): [The parameters of the world]
    """
    # checks that preconditions on parameters are met
    paramenter_check(parameters)

    # Making the output class and initialize it
    res=result_init(parameters)

    # Build World and Popoulate World
    world = buildWorld(parameters)

    # Data collection for living animals
    alive_animals(world,res)

    

    # Handles whether or not the simulation is vizualised or not from parameters
    if parameters.execution.batch:  
        cg = ColourGraphics(
            parameters.execution.max_steps,
            world.get("world_1d"),
            parameters.world.west_east_length,
            parameters.world.north_south_length,
            parameters.execution.step_delay
            )
        cg.start()
        cgu = cg.update
        cgs = cg.stop
    else:
        cgu = int
        cgs = int
   
    # Per tick
    tick = 0

    # Rabbits be rabbits!
    rabbitsYouKnow()
    
    while len(world.get("animals"))!= 0 and tick < parameters.execution.max_steps:
        # Counter for each step in the simulation.
        tick += 1
        
        [world,res]                  = sleep(world,res)
        [world,res]                  = feed(world,res)

        [Moveable_animals,res,world]  = Breeding(world,parameters.world,res)

        # Moves animals when the simulation is executed.
        Move_animals(Moveable_animals, world.get("world"), parameters.world)
        
        # Easier access to living animals for data management.
        res = alive_animals(world,res)

        # Updates GUI according to steps.
        cgu(tick)

   
    cgs()

    # Records the total amount of steps for the current simulation.
    res.steps = tick

    return res


def result_init(parameters: parameters.Simulation)->results.SimulationStats:
    
    
    # The Result class is created for data storage
    res = results.SimulationStats()

    # Used for data collection
    res.rabbits.total = parameters.rabbits.initial_size 
    res.foxes.total = parameters.foxes.initial_size 

    # Creates a list for kills according to world area
    kill_list = [0]*parameters.world.west_east_length * parameters.world.north_south_length
    
    # Creates two-dimensional grid that administrates kills per patch during simulation
    kill_grid = list_to_grid(kill_list,parameters.world.north_south_length)
    res.kills_per_patch = kill_grid

    return res

def paramenter_check(parameters: parameters.Simulation):

    print(" Checking parameters...", end="")
    assert 0 < parameters.world.north_south_length
    assert 0 < parameters.world.west_east_length
    assert 0 <= parameters.rabbits.initial_size <= parameters.world.area()
    assert 0 <= parameters.foxes.initial_size <= parameters.world.area()
    assert 0 <= parameters.rabbits.reproduction_probability <= 1
    assert 0 <= parameters.foxes.reproduction_probability <= 1
    assert 0 <= parameters.rabbits.metabolism
    assert 0 <= parameters.foxes.metabolism
    print("everything is ok.")

def print_Result_Check(res):
          
    print("\n")
    print("Number of individuals that died by old age.")
    print("Foxes")
    print(res.foxes.dead_by_old_age) 
    print("Rabbits")    
    print(res.rabbits.dead_by_old_age)       #
    
    print("\n")
    print("Number of individuals that died by predation.")
    print(res.rabbits.dead_by_predation)#
    
    print("\n")
    print("Number of individuals that died by starvation.")
    print("Foxes")
    print(res.foxes.dead_by_starvation)       #
    print("Rabbits")
    print(res.rabbits.dead_by_starvation)       #
    
    print("\n")
    print("Individuals alive and ever lived")
    print("Foxes")
    print(res.foxes.total)       #
    print("Rabbits")
    print(res.rabbits.total)       #

    print("\n")
    print("All the dead")
    placeholder=res.rabbits.dead_by_old_age+res.rabbits.dead_by_starvation+res.rabbits.dead_by_predation+res.foxes.dead_by_old_age+res.foxes.dead_by_starvation
    print(placeholder)
    print("Foxes")
    print(res.foxes.dead_by_old_age+res.foxes.dead_by_starvation)
    print("Rabbits")
    print(res.rabbits.dead_by_old_age+res.rabbits.dead_by_starvation+res.rabbits.dead_by_predation)
    print("total population alive and dead")
    print(res.foxes.total+res.rabbits.total)       #
    
    print("The Different between all the dead and Total alive and dead (The total alice animals)")
    print(res.foxes.total+res.rabbits.total-placeholder)   
    print("The number of animal alive when looking at the last step in result")
    print(res.foxes.size_per_step[-1]+res.rabbits.size_per_step[-1])
    print("Foxes")
    print(res.foxes.size_per_step[-1])
    print("Rabbits")
    print(res.rabbits.size_per_step[-1])
    grid_and_list= input("do you want to see the grids and lists? press \"y\" if yes: ")
    if grid_and_list=="y":
        print("A record of the age of death of each individual.")
        print(res.foxes.age_at_death)     #
        print(res.rabbits.age_at_death)
        
        print("\n")
        print("A record of the size of the (alive) population, in chronological order.")
        print(res.foxes.size_per_step)
        print(res.rabbits.size_per_step)

        print("\n")
        print("A record of the average energy level across the population, in chronological order.")
        print(res.foxes.avg_energy_per_step)       #
        print(res.rabbits.avg_energy_per_step)#
        print(res.avg_energy_per_step)

        print("\n")
        print("A grid containing the total of deaths by predation per every patch in the simulation.")
        print(res.kills_per_patch)

sim=parameters.Simulation()
sim.execution.max_steps=10
sim.execution.batch=False
res = run(sim)
print_Result_Check(res)

